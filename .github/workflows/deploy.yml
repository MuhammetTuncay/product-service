name: Deploy Laravel and Nginx to Docker Hub and EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Git authentication
        run: |
          git config --global url."https://${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Build and push Laravel app
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: muhammettncy/product-service:latest
          file: ./Dockerfile

      - name: Build and push Nginx
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: muhammettncy/nginxx:latest
          file: ./configs/nginx/Dockerfile

      - name: SSH into EC2 and update containers
        uses: appleboy/ssh-action@v0.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Logging into Docker Hub..."
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            echo "Creating Docker network if not exists..."
            docker network create app-network || true

            cd /home/ec2-user/product-service

            echo "Pulling latest Laravel app image..."
            docker pull muhammettncy/product-service:latest
            docker stop product_service || true
            docker rm product_service || true
            docker run --detach --name product_service --network app-network -p 9000:9000 muhammettncy/product-service:latest

            echo "Checking if .env file exists in the container..."
            if ! docker exec product_service test -f /var/www/backend/.env; then
              echo ".env file does not exist in the container. Copying..."
              docker cp /home/ec2-user/env/.env product_service:/var/www/backend/.env || { echo "Failed to copy .env file"; exit 1; }
            else
              echo ".env file already exists."
            fi

            echo "Installing Composer dependencies..."
            docker exec product_service bash -c "composer install --no-dev --optimize-autoloader"

            echo "Pulling and running MySQL container..."
            # MySQL database
            docker pull mysql:5.7
            docker stop product_service_mysql && docker rm product_service_mysql || true
            docker run --detach \
              --name product_service_mysql \
              --network app-network \
              -e MYSQL_ROOT_PASSWORD=root \
              -e MYSQL_DATABASE=product_service \
              -e MYSQL_USER=product_service \
              -e MYSQL_PASSWORD=product_service \
              -p 3306:3306 \
              mysql:5.7

            echo "Waiting for MySQL to be ready..."
            until docker exec product_service_mysql mysqladmin ping -h"127.0.0.1" -uroot -proot --silent; do
              echo "Waiting..."
              sleep 2
            done
            echo "MySQL is ready."

            echo "Running Laravel migrations and seeders..."
            docker exec product_service bash -c "php artisan migrate --force && php artisan db:seed --force"
            echo "Migrations and seeders completed."

            echo "Pulling and running Redis container..."
            docker pull redis:latest
            docker stop redis && docker rm redis || true
            docker run --detach --name redis --network app-network -p 6379:6379 redis:latest

            echo "Pulling and running RabbitMQ container..."
            docker pull rabbitmq:3-management
            docker stop rabbitmq && docker rm rabbitmq || true
            docker run --detach --name rabbitmq --network app-network -p 5672:5672 -p 15672:15672 rabbitmq:3-management

            echo "Pulling and running Elasticsearch container..."
            docker pull docker.elastic.co/elasticsearch/elasticsearch:7.17.9
            docker stop elasticsearch && docker rm elasticsearch || true
            docker run --detach --name elasticsearch --network app-network -p 9200:9200 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:7.17.9

            echo "Pulling and running Nginx container..."
            docker pull muhammettncy/nginxx:latest
            docker stop nginx && docker rm nginx || true
            docker run --detach --name nginx --network app-network -p 80:80 muhammettncy/nginxx:latest

            echo "Cleaning up unused Docker images..."
            docker image prune -f

            echo "Checking logs for containers..."
            docker logs nginx
            docker logs product_service
            docker logs product_service_mysql
            docker logs redis
            docker logs rabbitmq
            docker logs elasticsearch
